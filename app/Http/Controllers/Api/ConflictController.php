<?php
namespace App\Http\Controllers\Api;
use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Auth;

class ConflictController extends Controller
{
    public function check(Request $request)
    {
        $validated = $request->validate([
            'medicine_1' => 'required|string',
            'medicine_2' => 'required|string|different:medicine_1',
        ]);

        // Map brand names to scientific names
        $medicine1 = \App\Models\Medicine::where('brand_name', 'like', "%{$validated['medicine_1']}%")->first();
        $medicine2 = \App\Models\Medicine::where('brand_name', 'like', "%{$validated['medicine_2']}%")->first();

        $medicine1Name = $medicine1 && $medicine1->scientific_name ? $medicine1->scientific_name : $validated['medicine_1'];
        $medicine2Name = $medicine2 && $medicine2->scientific_name ? $medicine2->scientific_name : $validated['medicine_2'];

        $medicalHistory = Auth::user()->patientProfile ? strtolower(Auth::user()->patientProfile->medical_history_summary) : '';

        $prompt = "Check for drug interactions between {$medicine1Name} and {$medicine2Name}. "
                . "The user has the following medical history: {$medicalHistory}. "
                . "Use reliable medical sources only. "
                . "Explicitly check if {$medicine1Name} or {$medicine2Name} is contraindicated or unsafe for any condition in the user's medical history (e.g., Ibuprofen is unsafe for kidney disease, Warfarin may have risks with diabetes). "
                . "Provide specific warnings for each drug if it is contraindicated for any condition in the medical history. "
                . "Return a valid JSON object with ONLY the following structure: { 'interactions': [{ 'severity': 'low|moderate|high', 'description': 'string' }], 'contraindications': [{ 'medicine': 'string', 'condition': 'string', 'warning': 'string' }] }. "
                . "If no interactions or contraindications are found, return { 'interactions': [], 'contraindications': [] }. "
                . "Do NOT include any additional fields like 'references'. "
                . "Ensure the response is valid JSON and nothing else.";

        try {
            $response = Http::timeout(15)->withHeaders([
                'Content-Type' => 'application/json',
            ])->post(
                "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=" . env('GEMINI_API_KEY'),
                [
                    'contents' => [
                        ['parts' => [['text' => $prompt]]]
                    ]
                ]
            );

            if ($response->failed()) {
                Log::error('Gemini API failed', ['response' => $response->body()]);
                return response()->json(['message' => 'Failed to check interactions'], 500);
            }

            $data = $response->json();
            $text = $data['candidates'][0]['content']['parts'][0]['text'] ?? '{}';

            // Extract JSON from markdown code fences if present
            if (preg_match('/```json\s*(.*?)\s*```/s', $text, $matches)) {
                $text = $matches[1];
            }

            Log::info('Gemini processed response', ['text' => $text]);
            $result = json_decode($text, true) ?? ['interactions' => [], 'contraindications' => []];

            if (json_last_error() !== JSON_ERROR_NONE) {
                Log::error('JSON decode failed', ['text' => $text, 'error' => json_last_error_msg()]);
                return response()->json(['message' => 'Invalid response format from Gemini'], 500);
            }

            // Customize message based on result
            $message = empty($result['interactions']) && empty($result['contraindications'])
                ? "الدوائين آمنين ولا يوجد تعارض"
                : "تم العثور على تعارض دوائي أو موانع طبية";

            return response()->json([
                'data' => $result,
                'message' => $message,
                'disclaimer' => 'This result is generated by AI. Always consult a healthcare professional for medical advice.'
            ]);
        } catch (\Exception $e) {
            Log::error('Error checking interactions', ['error' => $e->getMessage()]);
            return response()->json(['message' => 'An error occurred'], 500);
        }
    }
}